"use strict";(()=>{var e={};e.id=4618,e.ids=[4618],e.modules={29336:e=>{e.exports=require("aws-sdk")},11185:e=>{e.exports=require("mongoose")},1738:e=>{e.exports=require("multer")},20145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},55315:e=>{e.exports=require("path")},56249:(e,r)=>{Object.defineProperty(r,"l",{enumerable:!0,get:function(){return function e(r,t){return t in r?r[t]:"then"in r&&"function"==typeof r.then?r.then(r=>e(r,t)):"function"==typeof r&&"default"===t?r:void 0}}})},7439:(e,r,t)=>{t.r(r),t.d(r,{config:()=>w,default:()=>v,routeModule:()=>I});var n={};t.r(n),t.d(n,{config:()=>S,default:()=>_});var o=t(71802),s=t(47153),a=t(56249),i=t(80382),l=t(11185),d=t.n(l);let u=new(d()).Schema({title:{type:String,required:!0},description:{type:String},url:{type:String},imagePath:{type:String,required:!0},createdAt:{type:Date,default:Date.now}}),c=d().models.HeaderImage||d().model("HeaderImage",u);var g=t(1738),m=t.n(g),p=t(29336),f=t.n(p),y=t(55315),E=t.n(y);f().config.update({accessKeyId:process.env.AWS_ACCESS_KEY_ID,secretAccessKey:process.env.AWS_SECRET_ACCESS_KEY,region:process.env.AWS_REGION});let A=new(f()).S3,P=m().memoryStorage(),h=m()({storage:P,fileFilter:(e,r,t)=>{let n=/jpeg|jpg|png|gif/,o=n.test(E().extname(r.originalname).toLowerCase());if(n.test(r.mimetype)&&o)return t(null,!0);t(Error("Error: File upload only supports the following filetypes - "+n))}}),S={api:{bodyParser:!1}};async function _(e,r){if(await (0,i.Z)(),"POST"===e.method)h.single("image")(e,r,async t=>{if(t)return r.status(500).json({message:"Error uploading image",error:t.message});let{title:n,description:o,url:s}=e.body;if(!n||!o||!s||!e.file)return r.status(400).json({message:"All fields and an image are required"});if(!process.env.AWS_BUCKET_NAME)return r.status(500).json({message:"AWS_BUCKET_NAME is not set"});let a={Bucket:process.env.AWS_BUCKET_NAME,Key:`header-images/${Date.now()}-${e.file.originalname}`,Body:e.file.buffer,ContentType:e.file.mimetype};try{let e=await A.upload(a).promise(),t=new c({title:n,description:o,url:s,imagePath:e.Location});await t.save(),r.status(201).json({message:"Header Image added successfully",headerImage:t})}catch(e){r.status(500).json({message:"Error uploading image to S3",error:e.message})}});else if("GET"===e.method)try{let e=await c.find();r.status(200).json(e)}catch(e){r.status(500).json({message:"Internal server error",error:e.message})}else if("PUT"===e.method){let{id:t}=e.query;h.single("image")(e,r,async n=>{if(n)return r.status(500).json({message:"Error uploading image",error:n.message});try{let n={...e.body.title&&{title:e.body.title},...e.body.description&&{description:e.body.description},...e.body.url&&{url:e.body.url}};if(e.file){let r={Bucket:process.env.AWS_BUCKET_NAME,Key:`header-images/${Date.now()}-${e.file.originalname}`,Body:e.file.buffer,ContentType:e.file.mimetype},t=await A.upload(r).promise();n.imagePath=t.Location}let o=await c.findByIdAndUpdate(t,n,{new:!0});if(!o)return r.status(404).json({message:"Header Image not found"});r.status(200).json({message:"Header Image updated successfully",headerImage:o})}catch(e){r.status(500).json({message:"Internal server error",error:e.message})}})}else r.status(405).json({message:"Method not allowed"})}let v=(0,a.l)(n,"default"),w=(0,a.l)(n,"config"),I=new o.PagesAPIRouteModule({definition:{kind:s.x.PAGES_API,page:"/api/headerImage",pathname:"/api/headerImage",bundlePath:"",filename:""},userland:n})},80382:(e,r,t)=>{t.d(r,{Z:()=>l});var n=t(11185),o=t.n(n);let s=process.env.MONGODB_URI,a=process.env.DB_NAME,i=null;if(!s)throw Error("Please define the MONGODB_URI environment variable inside .env.local");async function l(){if(i)return console.log("Using cached database connection"),"Using cached database connection";try{await o().connect(s,{useNewUrlParser:!0,useUnifiedTopology:!0,dbName:a});let e=o().connection;return e.once("open",()=>{console.log("Successfully connected to MongoDB")}),e.on("error",e=>{console.error("Error connecting to MongoDB:",e.message)}),i=e,"Successfully connected to MongoDB"}catch(e){return console.error("Error connecting to MongoDB:",e.message),`Error connecting to MongoDB: ${e.message}`}}},47153:(e,r)=>{var t;Object.defineProperty(r,"x",{enumerable:!0,get:function(){return t}}),function(e){e.PAGES="PAGES",e.PAGES_API="PAGES_API",e.APP_PAGE="APP_PAGE",e.APP_ROUTE="APP_ROUTE"}(t||(t={}))},71802:(e,r,t)=>{e.exports=t(20145)}};var r=require("../../webpack-api-runtime.js");r.C(e);var t=r(r.s=7439);module.exports=t})();