"use strict";(()=>{var e={};e.id=8123,e.ids=[8123],e.modules={29336:e=>{e.exports=require("aws-sdk")},11185:e=>{e.exports=require("mongoose")},1738:e=>{e.exports=require("multer")},20145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},56249:(e,r)=>{Object.defineProperty(r,"l",{enumerable:!0,get:function(){return function e(r,n){return n in r?r[n]:"then"in r&&"function"==typeof r.then?r.then(r=>e(r,n)):"function"==typeof r&&"default"===n?r:void 0}}})},33262:(e,r,n)=>{n.r(r),n.d(r,{config:()=>A,default:()=>P,routeModule:()=>v});var o={};n.r(o),n.d(o,{config:()=>E,default:()=>y});var t=n(71802),a=n(47153),s=n(56249),i=n(80382),c=n(56680),l=n(1738),u=n.n(l),d=n(29336),g=n.n(d);g().config.update({accessKeyId:process.env.AWS_ACCESS_KEY_ID,secretAccessKey:process.env.AWS_SECRET_ACCESS_KEY,region:process.env.AWS_REGION});let m=new(g()).S3,f=u().memoryStorage(),p=u()({storage:f,fileFilter:(e,r,n)=>{r.mimetype.startsWith("image/")?n(null,!0):n(Error("Invalid file type. Only images are allowed."))}});async function y(e,r){if("PUT"===e.method)try{await (0,i.Z)(),p.single("image")(e,r,async n=>{if(n)return r.status(400).json({message:"Error uploading image",error:n.message});let{name:o}=e.body,{id:t}=e.query;if(!o)return r.status(400).json({message:"Category name is required"});try{let n=await c.Z.findById(t);if(!n)return r.status(404).json({message:"Category not found"});let a=n.imageUrl;if(e.file){let r={Bucket:process.env.AWS_BUCKET_NAME,Key:`categories/${Date.now()}-${e.file.originalname}`,Body:e.file.buffer,ContentType:e.file.mimetype};a=(await m.upload(r).promise()).Location}n.name=o,n.imageUrl=a,await n.save(),r.status(200).json({message:"Category updated successfully",category:n})}catch(e){return console.error("Error updating category:",e),r.status(500).json({message:"Error updating category",error:e.message})}})}catch(e){console.error("Internal server error:",e),r.status(500).json({message:"Internal server error",error:e})}else r.status(405).json({message:"Method not allowed"})}let E={api:{bodyParser:!1}},P=(0,s.l)(o,"default"),A=(0,s.l)(o,"config"),v=new t.PagesAPIRouteModule({definition:{kind:a.x.PAGES_API,page:"/api/updatecategory/[id]",pathname:"/api/updatecategory/[id]",bundlePath:"",filename:""},userland:o})},80382:(e,r,n)=>{n.d(r,{Z:()=>c});var o=n(11185),t=n.n(o);let a=process.env.MONGODB_URI,s=process.env.DB_NAME,i=null;if(!a)throw Error("Please define the MONGODB_URI environment variable inside .env.local");async function c(){if(i)return console.log("Using cached database connection"),"Using cached database connection";try{await t().connect(a,{useNewUrlParser:!0,useUnifiedTopology:!0,dbName:s});let e=t().connection;return e.once("open",()=>{console.log("Successfully connected to MongoDB")}),e.on("error",e=>{console.error("Error connecting to MongoDB:",e.message)}),i=e,"Successfully connected to MongoDB"}catch(e){return console.error("Error connecting to MongoDB:",e.message),`Error connecting to MongoDB: ${e.message}`}}},56680:(e,r,n)=>{n.d(r,{Z:()=>s});var o=n(11185),t=n.n(o);let a=new(t()).Schema({name:{type:String,required:!0,unique:!0},imageUrl:{type:String,required:!0}}),s=t().models.Category||t().model("Category",a)},47153:(e,r)=>{var n;Object.defineProperty(r,"x",{enumerable:!0,get:function(){return n}}),function(e){e.PAGES="PAGES",e.PAGES_API="PAGES_API",e.APP_PAGE="APP_PAGE",e.APP_ROUTE="APP_ROUTE"}(n||(n={}))},71802:(e,r,n)=>{e.exports=n(20145)}};var r=require("../../../webpack-api-runtime.js");r.C(e);var n=r(r.s=33262);module.exports=n})();