"use strict";(()=>{var e={};e.id=9044,e.ids=[9044],e.modules={11185:e=>{e.exports=require("mongoose")},20145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},56249:(e,r)=>{Object.defineProperty(r,"l",{enumerable:!0,get:function(){return function e(r,t){return t in r?r[t]:"then"in r&&"function"==typeof r.then?r.then(r=>e(r,t)):"function"==typeof r&&"default"===t?r:void 0}}})},57689:(e,r,t)=>{t.r(r),t.d(r,{config:()=>l,default:()=>c,routeModule:()=>p});var n={};t.r(n),t.d(n,{default:()=>i});var o=t(71802),s=t(47153),a=t(56249),d=t(23776),u=t(39956);async function i(e,r){if(await (0,d.Z)(),"POST"===e.method)try{let{orderId:t,status:n}=e.body;if(!t||!n)return r.status(400).json({success:!1,message:"Order ID and status are required"});let o=await u.Z.findByIdAndUpdate(t,{status:n},{new:!0});if(!o)return r.status(404).json({success:!1,message:"Order not found"});r.status(200).json({success:!0,order:o})}catch(e){console.error("Error updating order status:",e.message),r.status(500).json({success:!1,message:"Internal server error"})}else r.setHeader("Allow",["POST"]),r.status(405).end(`Method ${e.method} Not Allowed`)}let c=(0,a.l)(n,"default"),l=(0,a.l)(n,"config"),p=new o.PagesAPIRouteModule({definition:{kind:s.x.PAGES_API,page:"/api/changeOrderStatus",pathname:"/api/changeOrderStatus",bundlePath:"",filename:""},userland:n})},47153:(e,r)=>{var t;Object.defineProperty(r,"x",{enumerable:!0,get:function(){return t}}),function(e){e.PAGES="PAGES",e.PAGES_API="PAGES_API",e.APP_PAGE="APP_PAGE",e.APP_ROUTE="APP_ROUTE"}(t||(t={}))},71802:(e,r,t)=>{e.exports=t(20145)},23776:(e,r,t)=>{t.d(r,{Z:()=>d});var n=t(11185);let o=process.env.MONGODB_URI,s=process.env.DB_NAME,a=null;if(!o)throw Error("Please define the MONGODB_URI environment variable inside .env.local");async function d(){if(a)return console.log("Using cached database connection"),"Using cached database connection";try{await n.connect(o,{useNewUrlParser:!0,useUnifiedTopology:!0,dbName:s});let e=n.connection;return e.once("open",()=>{console.log("Successfully connected to MongoDB")}),e.on("error",e=>{console.error("Error connecting to MongoDB:",e.message)}),a=e,"Successfully connected to MongoDB"}catch(e){return console.error("Error connecting to MongoDB:",e.message),`Error connecting to MongoDB: ${e.message}`}}},39956:(e,r,t)=>{t.d(r,{Z:()=>s});var n=t(11185);let o=new n.Schema({user:{type:n.Schema.Types.ObjectId,ref:"User",required:!0},selectedAddress:{type:n.Schema.Types.ObjectId,ref:"Address",required:!0},items:[{foodId:{type:n.Schema.Types.ObjectId,ref:"Item",required:!0},quantity:{type:Number,required:!0},price:{type:Number,required:!0}}],totalAmount:{type:Number,required:!0},itemDiscount:{type:Number,required:!0},couponDiscount:{type:Number,required:!0},totalGst:{type:Number,required:!0},deliveryFee:{type:Number,required:!0},subtotal:{type:Number,required:!0},paymentMethod:{type:String,enum:["UPI","CashOnDelivery"],required:!0},UTR:{type:String},paymentStatus:{type:String,enum:["Paid","Cash on Delivery"],required:!0,default:"Pending"},status:{type:String,enum:["Order Processing","Accepted","Food Preparing","Out For Delivery","Delivered","Cancelled"],default:"Order Processing"},date:{type:Date,default:Date.now}}),s=n.models.OrderPayment||n.model("OrderPayment",o)}};var r=require("../../webpack-api-runtime.js");r.C(e);var t=r(r.s=57689);module.exports=t})();