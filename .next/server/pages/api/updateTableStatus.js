"use strict";(()=>{var e={};e.id=2014,e.ids=[2014],e.modules={11185:e=>{e.exports=require("mongoose")},20145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},56249:(e,t)=>{Object.defineProperty(t,"l",{enumerable:!0,get:function(){return function e(t,n){return n in t?t[n]:"then"in t&&"function"==typeof t.then?t.then(t=>e(t,n)):"function"==typeof t&&"default"===n?t:void 0}}})},33633:(e,t,n)=>{n.r(t),n.d(t,{config:()=>d,default:()=>c,routeModule:()=>f});var r={};n.r(r),n.d(r,{default:()=>l});var a=n(71802),o=n(47153),s=n(56249),i=n(23776),u=n(35357);let l=async(e,t)=>{if("PUT"!==e.method)return t.status(405).json({message:"Method not allowed"});{let{tableName:n,status:r}=e.body;if(!n||!r||"string"!=typeof n||"string"!=typeof r)return t.status(400).json({message:"Table name and status are required"});try{await (0,i.Z)();let e=await u.Z.findOneAndUpdate({tableName:n},{status:r},{new:!0});if(!e)return t.status(404).json({message:"Table not found"});return await e.save(),t.status(200).json({ok:!0,message:"Status updated successfully",data:e})}catch(e){return t.status(500).json({message:"Internal server error"})}}},c=(0,s.l)(r,"default"),d=(0,s.l)(r,"config"),f=new a.PagesAPIRouteModule({definition:{kind:o.x.PAGES_API,page:"/api/updateTableStatus",pathname:"/api/updateTableStatus",bundlePath:"",filename:""},userland:r})},47153:(e,t)=>{var n;Object.defineProperty(t,"x",{enumerable:!0,get:function(){return n}}),function(e){e.PAGES="PAGES",e.PAGES_API="PAGES_API",e.APP_PAGE="APP_PAGE",e.APP_ROUTE="APP_ROUTE"}(n||(n={}))},71802:(e,t,n)=>{e.exports=n(20145)},23776:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(11185);let a=process.env.MONGODB_URI,o=process.env.DB_NAME,s=null;if(!a)throw Error("Please define the MONGODB_URI environment variable inside .env.local");async function i(){if(s)return console.log("Using cached database connection"),"Using cached database connection";try{await r.connect(a,{useNewUrlParser:!0,useUnifiedTopology:!0,dbName:o});let e=r.connection;return e.once("open",()=>{console.log("Successfully connected to MongoDB")}),e.on("error",e=>{console.error("Error connecting to MongoDB:",e.message)}),s=e,"Successfully connected to MongoDB"}catch(e){return console.error("Error connecting to MongoDB:",e.message),`Error connecting to MongoDB: ${e.message}`}}},35357:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(11185);let a=new r.Schema({tableName:{type:String,required:!0,trim:!0},seatNumber:{type:Number,required:!0,min:1},status:{type:String,required:!0,enum:["occupied","reserved","available"],default:"available"},tablestatus:{type:String,required:!0,enum:["active","inactive"],default:"active"}},{timestamps:!0}),o=r.models.Table||r.model("Table",a)}};var t=require("../../webpack-api-runtime.js");t.C(e);var n=t(t.s=33633);module.exports=n})();