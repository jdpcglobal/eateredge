"use strict";(()=>{var e={};e.id=4196,e.ids=[4196],e.modules={11185:e=>{e.exports=require("mongoose")},20145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},56249:(e,t)=>{Object.defineProperty(t,"l",{enumerable:!0,get:function(){return function e(t,n){return n in t?t[n]:"then"in t&&"function"==typeof t.then?t.then(t=>e(t,n)):"function"==typeof t&&"default"===n?t:void 0}}})},60567:(e,t,n)=>{n.r(t),n.d(t,{config:()=>m,default:()=>d,routeModule:()=>f});var r={};n.r(r),n.d(r,{default:()=>u});var o=n(71802),a=n(47153),i=n(56249),s=n(23776),l=n(4441),c=n(35357);async function u(e,t){if("POST"!==e.method)return t.status(405).json({error:"Method Not Allowed"});await (0,s.Z)();try{let{pin:n}=e.body,r=await l.Z.findOne({pin:n});if(!r)return t.status(404).json({error:"Invalid PIN. Captain not found."});let o=await c.Z.find({tableName:{$in:r.tables}});return t.status(200).json({name:r.name,tables:o.map(e=>({tableName:e.tableName,seatNumber:e.seatNumber,status:e.status}))})}catch(e){console.error("Error fetching tables:",e),t.status(500).json({error:"Internal Server Error"})}}let d=(0,i.l)(r,"default"),m=(0,i.l)(r,"config"),f=new o.PagesAPIRouteModule({definition:{kind:a.x.PAGES_API,page:"/api/checkPin",pathname:"/api/checkPin",bundlePath:"",filename:""},userland:r})},47153:(e,t)=>{var n;Object.defineProperty(t,"x",{enumerable:!0,get:function(){return n}}),function(e){e.PAGES="PAGES",e.PAGES_API="PAGES_API",e.APP_PAGE="APP_PAGE",e.APP_ROUTE="APP_ROUTE"}(n||(n={}))},71802:(e,t,n)=>{e.exports=n(20145)},23776:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(11185);let o=process.env.MONGODB_URI,a=process.env.DB_NAME,i=null;if(!o)throw Error("Please define the MONGODB_URI environment variable inside .env.local");async function s(){if(i)return console.log("Using cached database connection"),"Using cached database connection";try{await r.connect(o,{useNewUrlParser:!0,useUnifiedTopology:!0,dbName:a});let e=r.connection;return e.once("open",()=>{console.log("Successfully connected to MongoDB")}),e.on("error",e=>{console.error("Error connecting to MongoDB:",e.message)}),i=e,"Successfully connected to MongoDB"}catch(e){return console.error("Error connecting to MongoDB:",e.message),`Error connecting to MongoDB: ${e.message}`}}},35357:(e,t,n)=>{n.d(t,{Z:()=>a});var r=n(11185);let o=new r.Schema({tableName:{type:String,required:!0,trim:!0},seatNumber:{type:Number,required:!0,min:1},status:{type:String,required:!0,enum:["occupied","reserved","available"],default:"available"},tablestatus:{type:String,required:!0,enum:["active","inactive"],default:"active"}},{timestamps:!0}),a=r.models.Table||r.model("Table",o)},4441:(e,t,n)=>{n.d(t,{Z:()=>a});var r=n(11185);let o=new r.Schema({name:{type:String,required:!0},pin:{type:String,required:!0,minlength:4,maxlength:4},tables:{type:[String],default:[]}},{timestamps:!0}),a=r.models.Vectory||r.model("Vectory",o)}};var t=require("../../webpack-api-runtime.js");t.C(e);var n=t(t.s=60567);module.exports=n})();