"use strict";(()=>{var e={};e.id=8123,e.ids=[8123],e.modules={29336:e=>{e.exports=require("aws-sdk")},11185:e=>{e.exports=require("mongoose")},1738:e=>{e.exports=require("multer")},20145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},56249:(e,r)=>{Object.defineProperty(r,"l",{enumerable:!0,get:function(){return function e(r,o){return o in r?r[o]:"then"in r&&"function"==typeof r.then?r.then(r=>e(r,o)):"function"==typeof r&&"default"===o?r:void 0}}})},60714:(e,r,o)=>{o.r(r),o.d(r,{config:()=>E,default:()=>y,routeModule:()=>P});var n={};o.r(n),o.d(n,{config:()=>p,default:()=>f});var t=o(71802),a=o(47153),s=o(56249),i=o(23776),c=o(20796),l=o(1738),u=o(29336);u.config.update({accessKeyId:process.env.AWS_ACCESS_KEY_ID,secretAccessKey:process.env.AWS_SECRET_ACCESS_KEY,region:process.env.AWS_REGION});let d=new u.S3,g=l.memoryStorage(),m=l({storage:g,fileFilter:(e,r,o)=>{r.mimetype.startsWith("image/")?o(null,!0):o(Error("Invalid file type. Only images are allowed."))}});async function f(e,r){if("PUT"===e.method)try{await (0,i.Z)(),m.single("image")(e,r,async o=>{if(o)return r.status(400).json({message:"Error uploading image",error:o.message});let{name:n}=e.body,{id:t}=e.query;if(!n)return r.status(400).json({message:"Category name is required"});try{let o=await c.Z.findById(t);if(!o)return r.status(404).json({message:"Category not found"});let a=o.imageUrl;if(e.file){let r={Bucket:process.env.AWS_BUCKET_NAME,Key:`categories/${Date.now()}-${e.file.originalname}`,Body:e.file.buffer,ContentType:e.file.mimetype};a=(await d.upload(r).promise()).Location}o.name=n,o.imageUrl=a,await o.save(),r.status(200).json({message:"Category updated successfully",category:o})}catch(e){return console.error("Error updating category:",e),r.status(500).json({message:"Error updating category",error:e.message})}})}catch(e){console.error("Internal server error:",e),r.status(500).json({message:"Internal server error",error:e})}else r.status(405).json({message:"Method not allowed"})}let p={api:{bodyParser:!1}},y=(0,s.l)(n,"default"),E=(0,s.l)(n,"config"),P=new t.PagesAPIRouteModule({definition:{kind:a.x.PAGES_API,page:"/api/updatecategory/[id]",pathname:"/api/updatecategory/[id]",bundlePath:"",filename:""},userland:n})},47153:(e,r)=>{var o;Object.defineProperty(r,"x",{enumerable:!0,get:function(){return o}}),function(e){e.PAGES="PAGES",e.PAGES_API="PAGES_API",e.APP_PAGE="APP_PAGE",e.APP_ROUTE="APP_ROUTE"}(o||(o={}))},71802:(e,r,o)=>{e.exports=o(20145)},23776:(e,r,o)=>{o.d(r,{Z:()=>i});var n=o(11185);let t=process.env.MONGODB_URI,a=process.env.DB_NAME,s=null;if(!t)throw Error("Please define the MONGODB_URI environment variable inside .env.local");async function i(){if(s)return console.log("Using cached database connection"),"Using cached database connection";try{await n.connect(t,{useNewUrlParser:!0,useUnifiedTopology:!0,dbName:a});let e=n.connection;return e.once("open",()=>{console.log("Successfully connected to MongoDB")}),e.on("error",e=>{console.error("Error connecting to MongoDB:",e.message)}),s=e,"Successfully connected to MongoDB"}catch(e){return console.error("Error connecting to MongoDB:",e.message),`Error connecting to MongoDB: ${e.message}`}}},20796:(e,r,o)=>{o.d(r,{Z:()=>a});var n=o(11185);let t=new n.Schema({name:{type:String,required:!0,unique:!0},imageUrl:{type:String,required:!0}}),a=n.models.Category||n.model("Category",t)}};var r=require("../../../webpack-api-runtime.js");r.C(e);var o=r(r.s=60714);module.exports=o})();