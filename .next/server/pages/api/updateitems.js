"use strict";(()=>{var e={};e.id=6644,e.ids=[6644],e.modules={11185:e=>{e.exports=require("mongoose")},20145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},56249:(e,t)=>{Object.defineProperty(t,"l",{enumerable:!0,get:function(){return function e(t,r){return r in t?t[r]:"then"in t&&"function"==typeof t.then?t.then(t=>e(t,r)):"function"==typeof t&&"default"===r?t:void 0}}})},9037:(e,t,r)=>{r.r(t),r.d(t,{config:()=>l,default:()=>c,routeModule:()=>m});var n={};r.r(n),r.d(n,{default:()=>d});var o=r(71802),a=r(47153),i=r(56249),s=r(23776),u=r(65946);async function d(e,t){await (0,s.Z)();let{method:r}=e;if("PUT"!==r)return t.setHeader("Allow",["PUT"]),t.status(405).end(`Method ${r} Not Allowed`);{let{tableId:r,itemId:n,newStatus:o}=e.body;if(!r||!n||!o)return t.status(400).json({error:"Missing required fields"});try{let e=await u.Z.findOneAndUpdate({_id:r,"orderItems._id":n},{$set:{"orderItems.$.itemstatus":o}},{new:!0});if(!e)return t.status(404).json({error:"Table or item not found"});return t.status(200).json({success:!0,table:e})}catch(e){return console.error("Error updating item status:",e),t.status(500).json({error:"Internal Server Error"})}}}let c=(0,i.l)(n,"default"),l=(0,i.l)(n,"config"),m=new o.PagesAPIRouteModule({definition:{kind:a.x.PAGES_API,page:"/api/updateitems",pathname:"/api/updateitems",bundlePath:"",filename:""},userland:n})},47153:(e,t)=>{var r;Object.defineProperty(t,"x",{enumerable:!0,get:function(){return r}}),function(e){e.PAGES="PAGES",e.PAGES_API="PAGES_API",e.APP_PAGE="APP_PAGE",e.APP_ROUTE="APP_ROUTE"}(r||(r={}))},71802:(e,t,r)=>{e.exports=r(20145)},23776:(e,t,r)=>{r.d(t,{Z:()=>s});var n=r(11185);let o=process.env.MONGODB_URI,a=process.env.DB_NAME,i=null;if(!o)throw Error("Please define the MONGODB_URI environment variable inside .env.local");async function s(){if(i)return console.log("Using cached database connection"),"Using cached database connection";try{await n.connect(o,{useNewUrlParser:!0,useUnifiedTopology:!0,dbName:a});let e=n.connection;return e.once("open",()=>{console.log("Successfully connected to MongoDB")}),e.on("error",e=>{console.error("Error connecting to MongoDB:",e.message)}),i=e,"Successfully connected to MongoDB"}catch(e){return console.error("Error connecting to MongoDB:",e.message),`Error connecting to MongoDB: ${e.message}`}}},65946:(e,t,r)=>{r.d(t,{Z:()=>a});var n=r(11185);let o=new n.Schema({customerName:{type:String,required:!0},mobileNumber:{type:String,default:0},seatNumber:{type:Number,default:0},tableNumber:{type:String,required:!0},maxPax:{type:Number,required:!0},orderItems:[{itemId:{type:n.Schema.Types.ObjectId,ref:"Item",required:!0},name:{type:String,required:!0},discount:{type:Number,required:!0},gstRate:{type:Number,required:!0},price:{type:Number,required:!0},quantity:{type:Number,default:1},itemstatus:{type:String,enum:["Pending","Preparing","Ready","Served","Cancelled"],default:"Pending"},total:{type:Number,required:!0}}],totalPrice:{type:Number,required:!0},createdDate:{type:Date,default:Date.now}},{timestamps:!0}),a=n.models.Tablesave||n.model("Tablesave",o)}};var t=require("../../webpack-api-runtime.js");t.C(e);var r=t(t.s=9037);module.exports=r})();