"use strict";(()=>{var e={};e.id=9724,e.ids=[9724],e.modules={11185:e=>{e.exports=require("mongoose")},20145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},56249:(e,t)=>{Object.defineProperty(t,"l",{enumerable:!0,get:function(){return function e(t,n){return n in t?t[n]:"then"in t&&"function"==typeof t.then?t.then(t=>e(t,n)):"function"==typeof t&&"default"===n?t:void 0}}})},14317:(e,t,n)=>{n.r(t),n.d(t,{config:()=>d,default:()=>l,routeModule:()=>f});var r={};n.r(r),n.d(r,{default:()=>c});var o=n(71802),a=n(47153),s=n(56249),i=n(23776),u=n(35357);async function c(e,t){if("PATCH"!==e.method)return t.status(405).json({message:"Method not allowed"});try{let{tableName:n,status:r}=e.body;await (0,i.Z)();let o=await u.Z.findOneAndUpdate({tableName:n},{status:r},{new:!0});if(!o)return t.status(404).json({message:"Table not found"});return t.status(200).json({message:"Table status updated successfully",table:o})}catch(e){return console.error("Error updating table status:",e),t.status(500).json({message:"Internal server error"})}}let l=(0,s.l)(r,"default"),d=(0,s.l)(r,"config"),f=new o.PagesAPIRouteModule({definition:{kind:a.x.PAGES_API,page:"/api/updatestatus1",pathname:"/api/updatestatus1",bundlePath:"",filename:""},userland:r})},47153:(e,t)=>{var n;Object.defineProperty(t,"x",{enumerable:!0,get:function(){return n}}),function(e){e.PAGES="PAGES",e.PAGES_API="PAGES_API",e.APP_PAGE="APP_PAGE",e.APP_ROUTE="APP_ROUTE"}(n||(n={}))},71802:(e,t,n)=>{e.exports=n(20145)},23776:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(11185);let o=process.env.MONGODB_URI,a=process.env.DB_NAME,s=null;if(!o)throw Error("Please define the MONGODB_URI environment variable inside .env.local");async function i(){if(s)return console.log("Using cached database connection"),"Using cached database connection";try{await r.connect(o,{useNewUrlParser:!0,useUnifiedTopology:!0,dbName:a});let e=r.connection;return e.once("open",()=>{console.log("Successfully connected to MongoDB")}),e.on("error",e=>{console.error("Error connecting to MongoDB:",e.message)}),s=e,"Successfully connected to MongoDB"}catch(e){return console.error("Error connecting to MongoDB:",e.message),`Error connecting to MongoDB: ${e.message}`}}},35357:(e,t,n)=>{n.d(t,{Z:()=>a});var r=n(11185);let o=new r.Schema({tableName:{type:String,required:!0,trim:!0},seatNumber:{type:Number,required:!0,min:1},status:{type:String,required:!0,enum:["occupied","reserved","available"],default:"available"},tablestatus:{type:String,required:!0,enum:["active","inactive"],default:"active"}},{timestamps:!0}),a=r.models.Table||r.model("Table",o)}};var t=require("../../webpack-api-runtime.js");t.C(e);var n=t(t.s=14317);module.exports=n})();